<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Riven的博客</title>
  <subtitle>Look Inside Deeply</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://rivenzoo.github.io/"/>
  <updated>2017-01-20T14:04:18.000Z</updated>
  <id>http://rivenzoo.github.io/</id>
  
  <author>
    <name>RivenZoo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Cpp Static Initialization Order Fiasco</title>
    <link href="http://rivenzoo.github.io/2017/01/20/Cpp-Static-initialization-order-fiasco/"/>
    <id>http://rivenzoo.github.io/2017/01/20/Cpp-Static-initialization-order-fiasco/</id>
    <published>2017-01-20T12:08:13.000Z</published>
    <updated>2017-01-20T14:04:18.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;Static-initialization-order-fiasco&quot;&gt;&lt;a href=&quot;#Static-initialization-order-fiasco&quot; class=&quot;headerlink&quot; title=&quot;Static initialization order fiasco&quot;&gt;&lt;/a&gt;Static initialization order fiasco&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Construct On First Use Idiom&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If the object does not need to be destructed, uses a static pointer.&lt;/p&gt;
  &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// File x.cpp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Fred.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;Fred&amp;amp; &lt;span class=&quot;title&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Fred* ans = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Fred();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; *ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// File Barney.cpp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Barney.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Barney::Barney()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  x().goBowling();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This approach is that the Fred object is &lt;strong&gt;never destructed&lt;/strong&gt;.&lt;br&gt;The Construct On First Use Idiom uses a pointer and intentionally leaks the object.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you need to destruct the object and do not care the order of static objects deinitialization, uses a static object.&lt;/p&gt;
  &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// File x.cpp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Fred.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;Fred&amp;amp; &lt;span class=&quot;title&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Fred ans;  &lt;span class=&quot;comment&quot;&gt;// was static Fred* ans = new Fred();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans;       &lt;span class=&quot;comment&quot;&gt;// was return *ans;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  It does not leak the object, but &lt;strong&gt;it does not control the order of static deinitialization&lt;/strong&gt;, so it is (very!) unsafe to use the object during static deinitialization, that is, from a destructor of another statically declared object.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Nifty Counter&lt;/p&gt;
&lt;p&gt;  It is a more complicated solution that solves problems mentioned above.&lt;/p&gt;
  &lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Stream.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;ifndef&lt;/span&gt; STREAM_H&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; STREAM_H&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Stream&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;Stream&lt;/span&gt; ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ~&lt;span class=&quot;built_in&quot;&gt;Stream&lt;/span&gt; ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Stream&lt;/span&gt;&amp;amp; stream; &lt;span class=&quot;comment&quot;&gt;// global stream object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; StreamInitializer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  StreamInitializer ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ~StreamInitializer ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; streamInitializer; &lt;span class=&quot;comment&quot;&gt;// static initializer for every translation unit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// STREAM_H&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
  &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Stream.cpp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Stream.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;new&amp;gt;&lt;/span&gt;         // placement new&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;type_traits&amp;gt;&lt;/span&gt; // aligned_storage&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; nifty_counter; &lt;span class=&quot;comment&quot;&gt;// zero initialized at load time&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::aligned_storage&amp;lt;&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt; (Stream), &lt;span class=&quot;keyword&quot;&gt;alignof&lt;/span&gt; (Stream)&amp;gt;::type&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  stream_buf; &lt;span class=&quot;comment&quot;&gt;// memory for the stream object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Stream&amp;amp; stream = &lt;span class=&quot;keyword&quot;&gt;reinterpret_cast&lt;/span&gt;&amp;lt;Stream&amp;amp;&amp;gt; (stream_buf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Stream::Stream ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// initialize things&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Stream::~Stream ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// clean-up&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StreamInitializer::StreamInitializer ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (nifty_counter++ == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; (&amp;amp;stream) Stream (); &lt;span class=&quot;comment&quot;&gt;// placement new&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StreamInitializer::~StreamInitializer ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (--nifty_counter == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) (&amp;amp;stream)-&amp;gt;~Stream ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  The header file of the Stream class &lt;strong&gt;must be included before any member function can be called on the Stream object&lt;/strong&gt;.&lt;br&gt;  An instance of the StreamInitializer class is included in each compilation unit. Any use of the Stream object follows the inclusion of the header, which ensures that the constructor of the initializer object is called before the Stream object is used.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Static-initialization-order-fiasco&quot;&gt;&lt;a href=&quot;#Static-initialization-order-fiasco&quot; class=&quot;headerlink&quot; title=&quot;Static initialization or
    
    </summary>
    
      <category term="编程语言" scheme="http://rivenzoo.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C/C++" scheme="http://rivenzoo.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>go-doc-tips</title>
    <link href="http://rivenzoo.github.io/2016/12/18/go-doc-tips/"/>
    <id>http://rivenzoo.github.io/2016/12/18/go-doc-tips/</id>
    <published>2016-12-18T13:57:03.000Z</published>
    <updated>2016-12-18T14:01:25.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;Go-doc-tips&quot;&gt;&lt;a href=&quot;#Go-doc-tips&quot; class=&quot;headerlink&quot; title=&quot;Go doc tips&quot;&gt;&lt;/a&gt;Go doc tips&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;新建&lt;code&gt;doc.go&lt;/code&gt;作为文档文件，&lt;code&gt;package pkgname&lt;/code&gt;之前的注释作为文档。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;文档注释的格式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;相邻的行位于同一段落，分段需要添加空行&lt;/li&gt;
&lt;li&gt;上下空行的短语会被作为接下来段落的head&lt;/li&gt;
&lt;li&gt;预先格式化的文本需要跟周围的注释保持缩进&lt;/li&gt;
&lt;li&gt;URL会被转换成链接，不需要标记&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go同一个目录可以添加&lt;code&gt;{pkg}_test&lt;/code&gt;的测试包。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;包&lt;code&gt;{pkg}_test&lt;/code&gt;的文件(&lt;code&gt;_test.go&lt;/code&gt;结尾)，函数名以&lt;code&gt;Example&lt;/code&gt;开头且没有参数的函数作为示例代码。&lt;/p&gt;
 &lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ExampleFoo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;     &lt;span class=&quot;comment&quot;&gt;// documents the Foo function or type&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ExampleBar_Qux&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// documents the Qux method of type Bar&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Example&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        &lt;span class=&quot;comment&quot;&gt;// documents the package as a whole&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ExampleReverse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// Reverse first example&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ExampleReverse_second&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// Reverse second example&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ExampleReverse_third&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// Reverse thirdß example&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; &lt;code&gt;_test.go&lt;/code&gt;结尾的文件，如果只包含一个&lt;code&gt;Example&lt;/code&gt;函数，并且有其他包级声明，整个文件会作为示例代码显示。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;// Output: olleh&lt;/code&gt;预期输出，示例函数可以作为&lt;code&gt;go test&lt;/code&gt;的测试用例。&lt;/p&gt;
 &lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package stringutil_test&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;github.com/golang/example/stringutil&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ExampleReverse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fmt.&lt;span class=&quot;type&quot;&gt;Println&lt;/span&gt;(stringutil.&lt;span class=&quot;type&quot;&gt;Reverse&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Output: olleh&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Go-doc-tips&quot;&gt;&lt;a href=&quot;#Go-doc-tips&quot; class=&quot;headerlink&quot; title=&quot;Go doc tips&quot;&gt;&lt;/a&gt;Go doc tips&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;新建&lt;code&gt;doc.go&lt;/code&gt;作为文档文件，
    
    </summary>
    
      <category term="编程语言" scheme="http://rivenzoo.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Go" scheme="http://rivenzoo.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>vim-shortcut</title>
    <link href="http://rivenzoo.github.io/2016/12/12/vim-shortcut/"/>
    <id>http://rivenzoo.github.io/2016/12/12/vim-shortcut/</id>
    <published>2016-12-12T12:17:08.000Z</published>
    <updated>2016-12-11T16:25:11.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;vim快捷键&quot;&gt;&lt;a href=&quot;#vim快捷键&quot; class=&quot;headerlink&quot; title=&quot;vim快捷键&quot;&gt;&lt;/a&gt;vim快捷键&lt;/h3&gt;&lt;h4 id=&quot;跳转&quot;&gt;&lt;a href=&quot;#跳转&quot; class=&quot;headerlink&quot; title=&quot;跳转&quot;&gt;&lt;/a&gt;跳转&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;行内跳转 &lt;/p&gt;
&lt;p&gt; &lt;code&gt;^&lt;/code&gt; 行开头&lt;br&gt; &lt;code&gt;$&lt;/code&gt; 行尾&lt;br&gt; &lt;code&gt;w/W&lt;/code&gt; 下一个单词开头&lt;br&gt; &lt;code&gt;e/E&lt;/code&gt; 下一个单词末尾&lt;br&gt; &lt;code&gt;b/B&lt;/code&gt; 上一个单词开头&lt;br&gt; &lt;code&gt;f+{字符}&lt;/code&gt; 下一个字符本身 &lt;code&gt;F+{字符}&lt;/code&gt; 上一个字符本身&lt;br&gt; &lt;code&gt;t+{字符}&lt;/code&gt; 下一个字符之后 &lt;code&gt;T+{字符}&lt;/code&gt; 上一个字符之后&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;跨行跳转&lt;/p&gt;
&lt;p&gt; &lt;code&gt;h&lt;/code&gt; 左 &lt;code&gt;j&lt;/code&gt; 下 &lt;code&gt;k&lt;/code&gt; 上 &lt;code&gt;l&lt;/code&gt; 右&lt;br&gt; &lt;code&gt;{数字}+h/j/k/l&lt;/code&gt; 跳转n个位置&lt;br&gt; &lt;code&gt;{数字}+G&lt;/code&gt; 跳转到第n行&lt;br&gt; &lt;code&gt;*&lt;/code&gt; 向下搜索光标对应单词&lt;br&gt; &lt;code&gt;#&lt;/code&gt; 向上搜索光标对应单词&lt;br&gt; &lt;code&gt;gg&lt;/code&gt; 文件开头&lt;br&gt; &lt;code&gt;G&lt;/code&gt; 文件末尾&lt;br&gt; &lt;code&gt;ctrl+b&lt;/code&gt; 向上翻页&lt;br&gt; &lt;code&gt;ctrl+f&lt;/code&gt; 向下翻页&lt;br&gt; &lt;code&gt;ctrl+u&lt;/code&gt; 向上翻半页&lt;br&gt; &lt;code&gt;ctrl+d&lt;/code&gt; 向下翻半页&lt;br&gt; &lt;code&gt;ctrl+o&lt;/code&gt; 跳转到光标上一个位置&lt;br&gt; &lt;code&gt;ctrl+i&lt;/code&gt; 跳转到光标下一个位置&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;编辑&quot;&gt;&lt;a href=&quot;#编辑&quot; class=&quot;headerlink&quot; title=&quot;编辑&quot;&gt;&lt;/a&gt;编辑&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;行内编辑&lt;/p&gt;
&lt;p&gt; &lt;code&gt;x&lt;/code&gt; 删除一个字符&lt;br&gt; &lt;code&gt;{数字}+x&lt;/code&gt; 删除n个字符&lt;br&gt; &lt;code&gt;dd&lt;/code&gt; 删除一行，包括换行&lt;br&gt; &lt;code&gt;d+{数字}+d&lt;/code&gt; / &lt;code&gt;{数字}+dd&lt;/code&gt; 删除n行&lt;br&gt; &lt;code&gt;d+w/W&lt;/code&gt; / &lt;code&gt;d+e/E&lt;/code&gt; 向后删除一个单词&lt;br&gt; &lt;code&gt;d+b/B&lt;/code&gt; 向前删除一个单词&lt;br&gt; &lt;code&gt;D&lt;/code&gt; / &lt;code&gt;d+$&lt;/code&gt; 删除光标之后所有字符，不包括换行&lt;br&gt; &lt;code&gt;i&lt;/code&gt; 光标之前插入&lt;br&gt; &lt;code&gt;a&lt;/code&gt; 光标之后插入&lt;br&gt; &lt;code&gt;r&lt;/code&gt; 替换光标处字符&lt;br&gt; &lt;code&gt;{数字}+r&lt;/code&gt;    替换光标开始n个字符&lt;br&gt; &lt;code&gt;o&lt;/code&gt; 插入下一行，光标跳转到新行&lt;br&gt; &lt;code&gt;O&lt;/code&gt; 插入上一行，光标跳转到新行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;复制粘贴&lt;/p&gt;
&lt;p&gt; &lt;code&gt;yy&lt;/code&gt; 复制一行&lt;br&gt; &lt;code&gt;{数字}+yy&lt;/code&gt; / &lt;code&gt;y+{数字}+y&lt;/code&gt; 复制n行&lt;br&gt; &lt;code&gt;y+{位置}+y&lt;/code&gt; 复制光标与某一行直接的内容&lt;br&gt; &lt;code&gt;y+w/W&lt;/code&gt; / &lt;code&gt;y+e/E&lt;/code&gt; 向后复制一个单词&lt;br&gt; &lt;code&gt;y+b/B&lt;/code&gt; 向前复制一个单词&lt;br&gt; &lt;code&gt;p&lt;/code&gt; 在光标后粘贴&lt;br&gt; &lt;code&gt;P&lt;/code&gt; 在光标前粘贴&lt;br&gt; &lt;code&gt;{数字}+p&lt;/code&gt; 多次粘贴&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;寄存器&quot;&gt;&lt;a href=&quot;#寄存器&quot; class=&quot;headerlink&quot; title=&quot;寄存器&quot;&gt;&lt;/a&gt;寄存器&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;常规模式&lt;/p&gt;
&lt;p&gt; &lt;code&gt;:h registers&lt;/code&gt; 查看man page&lt;br&gt; &lt;code&gt;&amp;quot;+{寄存器名}&lt;/code&gt; 引用一个寄存器&lt;br&gt; &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt; 未命名寄存器，复制或删除都会替换它的内容&lt;br&gt; &lt;code&gt;&amp;quot;0~&amp;quot;9&lt;/code&gt; &lt;code&gt;&amp;quot;0&lt;/code&gt; 保存最后一次复制内容 &lt;code&gt;&amp;quot;1&lt;/code&gt;~&lt;code&gt;&amp;quot;9&lt;/code&gt; 保存最后删除的内容，&lt;code&gt;&amp;quot;1&lt;/code&gt;为最近删除&lt;br&gt; &lt;code&gt;&amp;quot;+{寄存器名}+y&lt;/code&gt; 复制到指定寄存器&lt;br&gt; &lt;code&gt;&amp;quot;+{寄存器名}+p&lt;/code&gt; 粘贴指定寄存器内容&lt;br&gt; &lt;code&gt;:reg {寄存器名}&lt;/code&gt; 查看寄存器内容&lt;br&gt; &lt;code&gt;&amp;quot;.&lt;/code&gt; &lt;code&gt;&amp;quot;%&lt;/code&gt; &lt;code&gt;&amp;quot;:&lt;/code&gt; &lt;code&gt;&amp;quot;#&lt;/code&gt; 只读寄存器&lt;br&gt; &amp;gt;&lt;br&gt; &lt;code&gt;&amp;quot;.&lt;/code&gt;存最后插入的内容；&lt;code&gt;&amp;quot;%&lt;/code&gt;存当前文件相对于vim打开时的路径；&lt;code&gt;&amp;quot;:&lt;/code&gt;存最后执行的命令，使用&lt;code&gt;@:&lt;/code&gt;重复执行上一次命令；&lt;code&gt;&amp;quot;#&lt;/code&gt;存替换文件名&lt;/p&gt;
&lt;p&gt; &lt;code&gt;&amp;quot;=&lt;/code&gt;保存表达式或命令结果，&lt;code&gt;ctrl-r =&lt;/code&gt;可以在插入模式下粘贴结果，&lt;code&gt;:%s/&amp;lt;Ctrl-r&amp;gt;/something/g&lt;/code&gt;可以直接替换之前搜索的结果&lt;br&gt; &lt;code&gt;:let @{寄存器名}=&amp;#39;&amp;lt;Ctrl-r {寄存器名}&amp;gt;&amp;#39;&lt;/code&gt; 可以修改寄存器内容&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;编辑模式 &lt;/p&gt;
&lt;p&gt; &lt;code&gt;ctrl+r+{寄存器名}&lt;/code&gt; 粘贴寄存器内容&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;vim快捷键&quot;&gt;&lt;a href=&quot;#vim快捷键&quot; class=&quot;headerlink&quot; title=&quot;vim快捷键&quot;&gt;&lt;/a&gt;vim快捷键&lt;/h3&gt;&lt;h4 id=&quot;跳转&quot;&gt;&lt;a href=&quot;#跳转&quot; class=&quot;headerlink&quot; title=&quot;跳转&quot;&gt;&lt;
    
    </summary>
    
      <category term="编程工具" scheme="http://rivenzoo.github.io/categories/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Vim" scheme="http://rivenzoo.github.io/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>go-code-style-guide</title>
    <link href="http://rivenzoo.github.io/2016/09/24/go-code-style-guide/"/>
    <id>http://rivenzoo.github.io/2016/09/24/go-code-style-guide/</id>
    <published>2016-09-24T07:18:47.000Z</published>
    <updated>2016-11-24T11:45:22.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Go-Code-Style-Guide&quot;&gt;&lt;a href=&quot;#Go-Code-Style-Guide&quot; class=&quot;headerlink&quot; title=&quot;Go Code Style Guide&quot;&gt;&lt;/a&gt;Go Code Style Guide&lt;/h1&gt;&lt;p&gt;参考 &lt;a href=&quot;https://github.com/golang/go/wiki/CodeReviewComments&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Golang CodeReviewComments&lt;/a&gt; 整理而成。每条最后有&lt;code&gt;[require]&lt;/code&gt;的表示要求遵守。&lt;/p&gt;
&lt;h3 id=&quot;Style-Guide&quot;&gt;&lt;a href=&quot;#Style-Guide&quot; class=&quot;headerlink&quot; title=&quot;Style Guide&quot;&gt;&lt;/a&gt;Style Guide&lt;/h3&gt;&lt;h4 id=&quot;工具&quot;&gt;&lt;a href=&quot;#工具&quot; class=&quot;headerlink&quot; title=&quot;工具&quot;&gt;&lt;/a&gt;工具&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;go vet 静态检查命令，修复错误提示。&lt;code&gt;[require]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt; &lt;code&gt;go vet pkg|file&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;goimports 代码格式化工具，功能比gofmt更多，代码提交前使用。&lt;code&gt;[require]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt; &lt;code&gt;goimports -w file&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;golint 代码风格检查工具，建议按提示修改代码风格。&lt;/p&gt;
&lt;p&gt; &lt;code&gt;golint pkg|file&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;命名&quot;&gt;&lt;a href=&quot;#命名&quot; class=&quot;headerlink&quot; title=&quot;命名&quot;&gt;&lt;/a&gt;命名&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;命名使用单词首字母大写的规则，不要使用下划线连接单词。&lt;code&gt;[require]&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;注释&quot;&gt;&lt;a href=&quot;#注释&quot; class=&quot;headerlink&quot; title=&quot;注释&quot;&gt;&lt;/a&gt;注释&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;注释文档应该是完整的句子，以描述性名词开始，句号结尾。&lt;code&gt;[require]&lt;/code&gt;&lt;/p&gt;
 &lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Request represents a request to run a command.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;type &lt;span class=&quot;type&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;/span&gt;&amp;#123; ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Encode writes the JSON encoding of req to w.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Encode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(w io.Writer, req *Request)&lt;/span&gt;&lt;/span&gt; &amp;#123; ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;包和可导出的方法要有注释文档，注释文档和包声明、方法之间不要有空格。&lt;code&gt;[require]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;Error&quot;&gt;&lt;a href=&quot;#Error&quot; class=&quot;headerlink&quot; title=&quot;Error&quot;&gt;&lt;/a&gt;Error&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;用返回error代替panic，只在程序逻辑无法继续的情况下使用panic。&lt;code&gt;[require]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;error字符串不应该首字母大写（除非缩写或专有名词），也不要用标点符号结尾。&lt;code&gt;[require]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;不要用&lt;code&gt;_&lt;/code&gt;丢弃错误。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;import&quot;&gt;&lt;a href=&quot;#import&quot; class=&quot;headerlink&quot; title=&quot;import&quot;&gt;&lt;/a&gt;import&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;import分组，排列顺序为标准库、工程内部包、第三方包。&lt;/li&gt;
&lt;li&gt;避免&lt;code&gt;import . pkg&lt;/code&gt;，唯一使用的情况是在测试包中。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;变量名使用的范围小，短名字更好；变量使用范围大，名字的描述性要好；不常用的变量和全局变量名字描述性要好。&lt;code&gt;[require]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;声明空数组用&lt;code&gt;var t []string&lt;/code&gt;而不用 &lt;del&gt;t := []string{}&lt;/del&gt;，前者避免声明时分配内存。&lt;code&gt;[require]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对于单词缩写，全大写或全小写，不要使用首字母大写。例如使用URL/url而不用&lt;del&gt;Url&lt;/del&gt;，使用appID而不用&lt;del&gt;appId&lt;/del&gt;。&lt;code&gt;[require]&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;函数声明&quot;&gt;&lt;a href=&quot;#函数声明&quot; class=&quot;headerlink&quot; title=&quot;函数声明&quot;&gt;&lt;/a&gt;函数声明&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;相同类型返回值使用命名返回值来区分。&lt;code&gt;[require]&lt;/code&gt;&lt;/p&gt;
 &lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// Location returns f&#39;s latitude &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; longitude.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Negative values mean south &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; west, respectively.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(f *Foo)&lt;/span&gt; L&lt;span class=&quot;title&quot;&gt;ocation&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(lat, long float64, err error)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不要为了防止内存拷贝而传递指针，只有在需要修改对象或者传递大对象时才使用指针参数。&lt;code&gt;[require]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;方法&quot;&gt;&lt;a href=&quot;#方法&quot; class=&quot;headerlink&quot; title=&quot;方法&quot;&gt;&lt;/a&gt;方法&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;方法接受对象的名字不要使用&lt;code&gt;me&lt;/code&gt;/&lt;code&gt;this&lt;/code&gt;/&lt;code&gt;self&lt;/code&gt;之类通用的名字，使用具体描述性单词，短方法可以使用短名字。&lt;code&gt;[require]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果接受对象是map，不要使用指针。&lt;code&gt;[require]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果接受对象是slice，并且不需要重新分配slice大小，不要使用指针。&lt;code&gt;[require]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果接受对象是struct，并且有类似&lt;code&gt;sync.Mutex&lt;/code&gt;用于同步的字段，需要使用指针避免拷贝。&lt;code&gt;[require]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果接受对象是大的struct或者array，需要使用指针避免拷贝。参考函数声明参数类型选择。&lt;code&gt;[require]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果需要修改接受对象，需要使用指针。&lt;code&gt;[require]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果接受对象的任何元素含有可变对象或指针，建议使用指针。&lt;/li&gt;
&lt;li&gt;如果接受对象是array或struct，元素和字段只包含&lt;code&gt;int&lt;/code&gt;/&lt;code&gt;string&lt;/code&gt;/&lt;code&gt;time.Time&lt;/code&gt;这类不可变类型，建议使用值类型。&lt;/li&gt;
&lt;li&gt;如果以上情况不适用，则使用指针类型。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;包&quot;&gt;&lt;a href=&quot;#包&quot; class=&quot;headerlink&quot; title=&quot;包&quot;&gt;&lt;/a&gt;包&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;包内部类型或函数命名不要以包名为前缀。&lt;code&gt;[require]&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;程序流程&quot;&gt;&lt;a href=&quot;#程序流程&quot; class=&quot;headerlink&quot; title=&quot;程序流程&quot;&gt;&lt;/a&gt;程序流程&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;及时处理错误。建议使用下面的形式。&lt;code&gt;[require]&lt;/code&gt;&lt;/p&gt;
 &lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;err&lt;/span&gt; != nil &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// error handling&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// or continue, etc.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// normal code&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x, &lt;span class=&quot;keyword&quot;&gt;err&lt;/span&gt; := &lt;span class=&quot;built_in&quot;&gt;f&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;err&lt;/span&gt; != nil &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// error handling&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// use x&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;init&lt;/code&gt;函数内只做一些轻量级初始化工作，避免执行依赖其他资源的代码。&lt;code&gt;[require]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; title=&quot;测试&quot;&gt;&lt;/a&gt;测试&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;测试失败时要描述清楚具体错误、输入输出以及期望的输出。&lt;/p&gt;
 &lt;figure class=&quot;highlight perl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; got != tt.want &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t.Errorf(&lt;span class=&quot;string&quot;&gt;&quot;Foo(%q) = %d; want %d&quot;&lt;/span&gt;, tt.in, got, tt.want) // &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; Fatalf, &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; test can&lt;span class=&quot;string&quot;&gt;&#39;t test anything more past this point&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Go-Code-Style-Guide&quot;&gt;&lt;a href=&quot;#Go-Code-Style-Guide&quot; class=&quot;headerlink&quot; title=&quot;Go Code Style Guide&quot;&gt;&lt;/a&gt;Go Code Style Guide&lt;/h1&gt;&lt;p&gt;参考
    
    </summary>
    
      <category term="编程语言" scheme="http://rivenzoo.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Go" scheme="http://rivenzoo.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>ssh-settings</title>
    <link href="http://rivenzoo.github.io/2016/05/24/ssh-settings/"/>
    <id>http://rivenzoo.github.io/2016/05/24/ssh-settings/</id>
    <published>2016-05-24T14:58:05.000Z</published>
    <updated>2016-06-13T15:41:44.000Z</updated>
    
    <content type="html">&lt;h4 id=&quot;记一下平时用到的有用的ssh设置和命令&quot;&gt;&lt;a href=&quot;#记一下平时用到的有用的ssh设置和命令&quot; class=&quot;headerlink&quot; title=&quot;记一下平时用到的有用的ssh设置和命令&quot;&gt;&lt;/a&gt;记一下平时用到的有用的ssh设置和命令&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;设置防止自动断开&lt;br&gt;&lt;code&gt;ssh user@host -o ServerAliveInterval=30&lt;/code&gt;&lt;br&gt;&lt;code&gt;-o&lt;/code&gt;可以设置很多选项，&lt;code&gt;ServerAliveInterval&lt;/code&gt;设置隔多少秒没收到数据之后，给对方发送消息请求响应，防止连接被中断&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;公钥验证免密码登陆&lt;br&gt;服务端设置: 修改 &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;，设置 &lt;code&gt;RSAAuthentication yes&lt;/code&gt;，重启ssh服务&lt;br&gt;本机: 生成公钥 &lt;code&gt;$ ssh-keygen&lt;/code&gt;，上传公钥 &lt;code&gt;$ ssh user@host &amp;#39;mkdir -p .ssh &amp;amp;&amp;amp; cat &amp;gt;&amp;gt; .ssh/authorized_keys&amp;#39; &amp;lt; ~/.ssh/id_rsa.pub&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;利用session clone来打开多个会话&lt;br&gt;本机: 修改 &lt;code&gt;~/.ssh/config&lt;/code&gt;文件，加入下面内容&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#file:~/.ssh/config
Host *
ControlMaster auto
ControlPath ~/.ssh/master-%r@%h:%p
ControlPersist 10m
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 上面的配置在第一次建立ssh连接的时候把连接作为master，后面的连接都会复用第一次建立的网络连接，通过ControlPath下面的文件来确定复用哪个。只要第一个连接不中断，后面ssh命令就可以不输入密码直接连接了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;利用tmux和session clone实现免密码登录&lt;br&gt;找一台私人服务器，按照上面3步骤配置ssh的session clone&lt;br&gt;创建tmux session: &lt;code&gt;tmux new -s session&lt;/code&gt;&lt;br&gt;在tmux里面登录: &lt;code&gt;ssh user@host -o ServerAliveInterval=30&lt;/code&gt;&lt;br&gt;这样你打开新的tmux窗口直接ssh就不需要密码了&lt;br&gt;终端退出tmux: &lt;code&gt;ctrl-b &amp;amp;&lt;/code&gt;关闭窗口, &lt;code&gt;ctrl-b d&lt;/code&gt;detach tmux client，这样tmux session的进程并不会退出，里面登录的ssh session也会保存下来&lt;br&gt;重新登录: &lt;code&gt;tmux attach -t session&lt;/code&gt;attach client，原来登录的ssh session可以继续使用&lt;br&gt;登出服务器: 终端退出tmux后把tmux转到后台，假设1号job是tmux执行&lt;code&gt;disown %1&lt;/code&gt;，如果进程被挂起需要执行&lt;code&gt;kill -cont -42813&lt;/code&gt;，42813是tmux的pid&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;本地端口转发&lt;br&gt;&lt;code&gt;$ ssh -NT -D 8080 host&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;python自动ssh登录&lt;br&gt;利用下面两个库可以实现自动ssh登录&lt;br&gt;&lt;code&gt;pexpect&lt;/code&gt;模拟shell输入&lt;br&gt;&lt;code&gt;pyotp&lt;/code&gt;进行otp验证&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;记一下平时用到的有用的ssh设置和命令&quot;&gt;&lt;a href=&quot;#记一下平时用到的有用的ssh设置和命令&quot; class=&quot;headerlink&quot; title=&quot;记一下平时用到的有用的ssh设置和命令&quot;&gt;&lt;/a&gt;记一下平时用到的有用的ssh设置和命令&lt;/h4&gt;&lt;ol&gt;

    
    </summary>
    
      <category term="Linux" scheme="http://rivenzoo.github.io/categories/Linux/"/>
    
    
      <category term="SSH" scheme="http://rivenzoo.github.io/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>Go使用Rsa加解密</title>
    <link href="http://rivenzoo.github.io/2016/04/15/go-rsa-notes/"/>
    <id>http://rivenzoo.github.io/2016/04/15/go-rsa-notes/</id>
    <published>2016-04-15T15:05:18.000Z</published>
    <updated>2016-04-17T08:07:56.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;一次使用rsa的经历&quot;&gt;&lt;a href=&quot;#一次使用rsa的经历&quot; class=&quot;headerlink&quot; title=&quot;一次使用rsa的经历&quot;&gt;&lt;/a&gt;一次使用rsa的经历&lt;/h3&gt;&lt;p&gt;   最近项目中要提供一个接口供客户端查询信息。逻辑简单主要考虑安全性问题，信息保密要求不高但是要保证是服务端返回的，也就是要防止数据被篡改和替换。&lt;/p&gt;
&lt;p&gt;   因为只有一个这样的接口，而且申请证书比较麻烦就不考虑https了。客户端的安全性不是很可靠，如果用AES这样的对称加密，密钥放客户端会有较大风险。考虑用rsa加密来达到目的。&lt;/p&gt;
&lt;p&gt;   初步想法是服务端保存rsa私钥，用来加密数据，客户端保存公钥，解密服务端返回的数据，这样客户端只能解服务端返回的数据，而且是密文传输。想法很简单，实现起来就遇到了问题。Go语言的rsa包提供的解密方法只能使用公钥加密。&lt;/p&gt;
&lt;p&gt;   函数原型&lt;br&gt;    &lt;code&gt;func EncryptOAEP(hash hash.Hash, random io.Reader, pub *PublicKey, msg []byte, label []byte) (out []byte, err error)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;   试验半天还是不知道如何使用私钥加密。Go论坛上有个使用私钥加密的讨论&lt;a href=&quot;https://groups.google.com/d/msg/golang-nuts/SkOBSsqLsrE/5rLo02hutbwJ&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://groups.google.com/d/msg/golang-nuts/SkOBSsqLsrE/5rLo02hutbwJ&lt;/a&gt;，大概的意思是公钥大家都能拿到，用私钥加密的信息并没有起到保密的作用，一般私钥只用来签名。虽然理论上私钥加密是可以的，但在这里只好换一个思路。&lt;/p&gt;
&lt;p&gt;   在这个场景中，签名可以达到要求，用私钥对关键信息签名，客户端用公钥校验，可以保证接受正确的服务端信息，唯一不太好的是明文传输的，需要引入一个对称加密对消息加密。&lt;/p&gt;
&lt;p&gt;   要引入对称加密，可以由客户端随机生成key，用这个key对称加密带校验信息的数据，然后用公钥加密key，这样只有服务端能解出key。然后服务端把客户端带上来的校验信息和数据打包，使用这个key进行对称加密再返回，客户端用自己生成的key解密并校验数据。这样一个流程能保证接受正确的服务端信息，同时是密文传输。&lt;/p&gt;
&lt;p&gt;   公钥是放在客户端的，假如被其他人拿到，破解了查询协议，最多只能查到数据。要伪造数据去欺骗其他客户端，必须同时知道其他客户端生成的key和校验信息，才能用伪造的请求的结果去欺骗这个客户端。若是AES的key泄漏，不但能查到数据，还能构造其他客户端的查询结果。&lt;/p&gt;
&lt;h3 id=&quot;rsa使用笔记&quot;&gt;&lt;a href=&quot;#rsa使用笔记&quot; class=&quot;headerlink&quot; title=&quot;rsa使用笔记&quot;&gt;&lt;/a&gt;rsa使用笔记&lt;/h3&gt;&lt;p&gt;   在跟客户端对接的过程中由于对rsa不是很熟悉，遇到了一些问题。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;padding模式&lt;br&gt;  rsa遵循公钥加密标准(Public Key Cryptography Standards, PKCS)，老的是1.x，一般用1.5，新的是2。对应的padding模式有三种：PKCS1V15对应v1.5，OAEP对应v2，Nopadding。Go的rsa库有前面两种，推荐使用OAEP。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;hash算法&lt;br&gt;  Go的rsa库提供hash函数的参数，可以自己设置hash函数，推荐使用sha256。不同hash值的长度会影响OAEP模式下最大消息长度，下面会讲到。加解密的hash函数要设置成一样的，客户端使用的比较旧的openssl使用的sha1，跟我设置的不一样，因为这个调试了很久。对比了一下sha256和md5，md5要快一点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;消息长度&lt;br&gt;  每次加解密的消息长度有限制。对于v1.5，最大长度为&lt;code&gt;keyBytes-11&lt;/code&gt;，&lt;code&gt;keyBytes&lt;/code&gt;是私钥字节数，比如2048位的私钥就是256字节。对于v2，最大长度为&lt;code&gt;keyBytes-(hashSize*2+2)&lt;/code&gt;，根据hash函数不同长度不同，比如sha1计算结果20字节，对于2048位的key最大长度&lt;code&gt;256-(20*2+2)&lt;/code&gt;。&lt;br&gt;  如果原文超过了这个一般就分块进行加密。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;rsa简介&quot;&gt;&lt;a href=&quot;#rsa简介&quot; class=&quot;headerlink&quot; title=&quot;rsa简介&quot;&gt;&lt;/a&gt;rsa简介&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;选择质数&lt;code&gt;p&lt;/code&gt;和&lt;code&gt;q&lt;/code&gt;，计算&lt;code&gt;n=p*q&lt;/code&gt;，欧拉函数&lt;code&gt;φ(n)=(p-1)*(q-1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;随机选择一个整数&lt;code&gt;e&lt;/code&gt;，条件是&lt;code&gt;1&amp;lt; e &amp;lt; φ(n)&lt;/code&gt;，且&lt;code&gt;e&lt;/code&gt;与&lt;code&gt;φ(n)&lt;/code&gt;互质，计算模反元素&lt;code&gt;d&lt;/code&gt;，即&lt;code&gt;(e*d)mod(φ(n))=1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;经过上面两步得到&lt;code&gt;p、q、n、e、d&lt;/code&gt;五个数，把&lt;code&gt;n、e&lt;/code&gt;作为公钥，&lt;code&gt;n、d&lt;/code&gt;作为私钥进行加解密。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加密：消息&lt;code&gt;m&lt;/code&gt;，&lt;code&gt;m&amp;lt;n&lt;/code&gt;，计算&lt;code&gt;(pow(m,e))mod(n)=c&lt;/code&gt;，&lt;code&gt;c&lt;/code&gt;就是&lt;code&gt;m&lt;/code&gt;的密文&lt;/li&gt;
&lt;li&gt;解密：密文&lt;code&gt;c&lt;/code&gt;，计算&lt;code&gt;(pow(c,d)mod(n))=m&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对于&lt;code&gt;m&amp;gt;=n&lt;/code&gt;，可以分块加密或者使用对称加密&lt;code&gt;m&lt;/code&gt;然后公钥加密对称加密密钥&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;算法的安全性保证在于很难从&lt;code&gt;n&lt;/code&gt;和&lt;code&gt;e&lt;/code&gt;推断出&lt;code&gt;d&lt;/code&gt;，计算&lt;code&gt;d&lt;/code&gt;需要知道&lt;code&gt;φ(n)&lt;/code&gt;，而当&lt;code&gt;n&lt;/code&gt;值很大的时候，直接计算&lt;code&gt;φ(n)&lt;/code&gt;很困难，分解&lt;code&gt;n&lt;/code&gt;得到&lt;code&gt;p、q&lt;/code&gt;也很困难。&lt;/p&gt;
&lt;p&gt;rsa原理的介绍推荐阮一峰老师的&lt;a href=&quot;http://www.ruanyifeng.com/blog/2013/07/rsa_algorithm_part_two.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文章&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Go语言rsa简单封装&quot;&gt;&lt;a href=&quot;#Go语言rsa简单封装&quot; class=&quot;headerlink&quot; title=&quot;Go语言rsa简单封装&quot;&gt;&lt;/a&gt;Go语言rsa简单封装&lt;/h3&gt;&lt;p&gt;   为了方便使用做了个简单封装，放在Github上。&lt;/p&gt;
&lt;p&gt;   安装方法&lt;br&gt;    &lt;code&gt;go get github.com/RivenZoo/goutil/dencrypt&lt;/code&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一次使用rsa的经历&quot;&gt;&lt;a href=&quot;#一次使用rsa的经历&quot; class=&quot;headerlink&quot; title=&quot;一次使用rsa的经历&quot;&gt;&lt;/a&gt;一次使用rsa的经历&lt;/h3&gt;&lt;p&gt;   最近项目中要提供一个接口供客户端查询信息。逻辑简单主要考虑安全性问题，
    
    </summary>
    
      <category term="编程语言" scheme="http://rivenzoo.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="安全" scheme="http://rivenzoo.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="Go" scheme="http://rivenzoo.github.io/tags/Go/"/>
    
      <category term="Rsa" scheme="http://rivenzoo.github.io/tags/Rsa/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu Mount NTFS with system boot</title>
    <link href="http://rivenzoo.github.io/2015/10/10/ubuntu-mount-ntfs/"/>
    <id>http://rivenzoo.github.io/2015/10/10/ubuntu-mount-ntfs/</id>
    <published>2015-10-10T03:14:23.000Z</published>
    <updated>2016-04-01T12:01:46.000Z</updated>
    
    <content type="html">&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ubuntu14.&lt;span class=&quot;number&quot;&gt;04&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ vim &lt;span class=&quot;regexp&quot;&gt;/etc/&lt;/span&gt;fstab&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;/dev/&lt;/span&gt;sda2 &lt;span class=&quot;regexp&quot;&gt;/media ntfs auto,user,rw,async,exec 0 0 # 加exec选项才可以执行挂载目录内的程序，相当于 mount -t ntfs /&lt;/span&gt;dev&lt;span class=&quot;regexp&quot;&gt;/sda2 /m&lt;/span&gt;edia -o exec&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
    
    </summary>
    
      <category term="Linux" scheme="http://rivenzoo.github.io/categories/Linux/"/>
    
    
      <category term="Ubuntu" scheme="http://rivenzoo.github.io/tags/Ubuntu/"/>
    
      <category term="NTFS" scheme="http://rivenzoo.github.io/tags/NTFS/"/>
    
  </entry>
  
  <entry>
    <title>Go Notes</title>
    <link href="http://rivenzoo.github.io/2015/09/19/go-notes/"/>
    <id>http://rivenzoo.github.io/2015/09/19/go-notes/</id>
    <published>2015-09-18T17:07:10.000Z</published>
    <updated>2016-04-01T10:35:52.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;Test&quot;&gt;&lt;a href=&quot;#Test&quot; class=&quot;headerlink&quot; title=&quot;Test&quot;&gt;&lt;/a&gt;Test&lt;/h3&gt;&lt;p&gt;   &lt;code&gt;go test -v -run=[pattern]&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;Benchmark&quot;&gt;&lt;a href=&quot;#Benchmark&quot; class=&quot;headerlink&quot; title=&quot;Benchmark&quot;&gt;&lt;/a&gt;Benchmark&lt;/h3&gt;&lt;p&gt;   &lt;code&gt;go test -v -run=bench -bench=[pattern] -cpu=[n] -benchtime=[t]&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;Analysis&quot;&gt;&lt;a href=&quot;#Analysis&quot; class=&quot;headerlink&quot; title=&quot;Analysis&quot;&gt;&lt;/a&gt;Analysis&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;race:&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;go test -v -run=[pattern] -race&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;cpu:&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;go test -v -run=bench -bench=[pattern] -cpu=[n] -benchtime=[t] -cpuprofile=[output]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;mem:&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;go test -v -run=bench -bench=[pattern] -cpu=[n] -benchtime=[t] -memprofile=[output]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;block:&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;go test -v -run=bench -bench=[pattern] -cpu=[n] -benchtime=[t] -blockprofile=[output]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;go tool pprof [program].test [output]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;GODEBUG&quot;&gt;&lt;a href=&quot;#GODEBUG&quot; class=&quot;headerlink&quot; title=&quot;GODEBUG&quot;&gt;&lt;/a&gt;GODEBUG&lt;/h3&gt;&lt;p&gt;   runtime提供了环境变量来控制程序。GODEBUG是其中一，它可以设置很多值，格式&lt;code&gt;name=value,name=val&lt;/code&gt;，如开启gctrace：&lt;code&gt;$ GODEBUG=&amp;#39;gctrace=1&amp;#39; your_program&lt;/code&gt;，会在标准错误输出gc信息。&lt;/p&gt;
&lt;h3 id=&quot;JSON&quot;&gt;&lt;a href=&quot;#JSON&quot; class=&quot;headerlink&quot; title=&quot;JSON&quot;&gt;&lt;/a&gt;JSON&lt;/h3&gt;&lt;p&gt;   推荐使用&lt;a href=&quot;https://github.com/pquerna/ffjson&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ffjson&lt;/a&gt;&lt;br&gt;   用它替换标准库后，编解码效率提高2倍。对于一些需要编码的大对象，可以采用sync.Pool缓存一定大小的bytes.Buffer，然后直接写buffer来完成json编码，性能有一定提高，在我笔记本上测10*1024的字符串数组，大概比标准json快20%，结果受到分配buffer大小的影响。在对json对象编码的时候，如果有字符串字段，并且字符串可能出现json格式用到的字符，最好预先对字符串编码，否则json编码的时候处理字符串转义会导致性能下降，如果字符串很长，可能会成为瓶颈。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Test&quot;&gt;&lt;a href=&quot;#Test&quot; class=&quot;headerlink&quot; title=&quot;Test&quot;&gt;&lt;/a&gt;Test&lt;/h3&gt;&lt;p&gt;   &lt;code&gt;go test -v -run=[pattern]&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;Benchmar
    
    </summary>
    
      <category term="编程语言" scheme="http://rivenzoo.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Go" scheme="http://rivenzoo.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>PythonBrew</title>
    <link href="http://rivenzoo.github.io/2015/04/15/python-brew/"/>
    <id>http://rivenzoo.github.io/2015/04/15/python-brew/</id>
    <published>2015-04-15T11:44:00.000Z</published>
    <updated>2016-05-24T15:00:51.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;Warning&quot;&gt;&lt;a href=&quot;#Warning&quot; class=&quot;headerlink&quot; title=&quot;Warning&quot;&gt;&lt;/a&gt;Warning&lt;/h3&gt;&lt;p&gt;pythonbrew作者弃坑了，推荐了另外一个项目&lt;a href=&quot;https://github.com/yyuu/pyenv&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/yyuu/pyenv&lt;/a&gt;&lt;br&gt;功能跟这个有重叠，貌似更强大，用的人也更多&lt;/p&gt;
&lt;h3 id=&quot;pythonbrew多版本管理工具&quot;&gt;&lt;a href=&quot;#pythonbrew多版本管理工具&quot; class=&quot;headerlink&quot; title=&quot;pythonbrew多版本管理工具&quot;&gt;&lt;/a&gt;pythonbrew多版本管理工具&lt;/h3&gt;&lt;p&gt;pythonbrew是一个python版本管理的工具，具体命令见&lt;a href=&quot;http://pythonbrew.readthedocs.org/en/latest/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://pythonbrew.readthedocs.org/en/latest/&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&quot;pythonbrew-install-2-5-6-的问题&quot;&gt;&lt;a href=&quot;#pythonbrew-install-2-5-6-的问题&quot; class=&quot;headerlink&quot; title=&quot;pythonbrew install 2.5.6 的问题&quot;&gt;&lt;/a&gt;pythonbrew install 2.5.6 的问题&lt;/h4&gt;&lt;p&gt;在安装python 2.5.6的时候遇到编译错误&lt;code&gt;make: *** [Modules/getbuildinfo.o] error 1&lt;/code&gt;，参考了&lt;a href=&quot;http://askubuntu.com/questions/398481/make-python2-5-failed-on-ubuntu-13-04&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://askubuntu.com/questions/398481/make-python2-5-failed-on-ubuntu-13-04&lt;/a&gt;这里的解决方法。&lt;br&gt;在python 2.5.6下载解压后的目录&lt;br&gt;&lt;code&gt;/HOME/.pythonbrew/build/Python-2.5.6&lt;/code&gt;，&lt;br&gt;手动执行&lt;br&gt;&lt;code&gt;SVNVERSION=not-found ./configure --prefix=/HOME/.pythonbrew/pythons/Python-2.5.6&lt;/code&gt;，&lt;br&gt;把python2.5.6安装到了pythonbrew预定的目录就可以了。&lt;/p&gt;
&lt;p&gt;pythonbrew管理虚拟环境&lt;br&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ pythonbrew venv init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pythonbrew venv create proj -&lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt; x&lt;span class=&quot;selector-class&quot;&gt;.x&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.x&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;以上2步就创建了一个可用的虚拟环境，然后到需要环境的工程，执行&lt;code&gt;pythonbrew venv use proj&lt;/code&gt;就可以使用之前创建的虚拟环境了。&lt;/p&gt;
&lt;h5 id=&quot;ps-pythonbrew有个别名pybrew。&quot;&gt;&lt;a href=&quot;#ps-pythonbrew有个别名pybrew。&quot; class=&quot;headerlink&quot; title=&quot;ps:pythonbrew有个别名pybrew。&quot;&gt;&lt;/a&gt;ps:pythonbrew有个别名pybrew。&lt;/h5&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Warning&quot;&gt;&lt;a href=&quot;#Warning&quot; class=&quot;headerlink&quot; title=&quot;Warning&quot;&gt;&lt;/a&gt;Warning&lt;/h3&gt;&lt;p&gt;pythonbrew作者弃坑了，推荐了另外一个项目&lt;a href=&quot;https://github.c
    
    </summary>
    
      <category term="编程语言" scheme="http://rivenzoo.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Python" scheme="http://rivenzoo.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Take a look at Level source code</title>
    <link href="http://rivenzoo.github.io/2015/03/08/leveldb-source-1/"/>
    <id>http://rivenzoo.github.io/2015/03/08/leveldb-source-1/</id>
    <published>2015-03-08T13:32:02.000Z</published>
    <updated>2016-04-01T12:01:27.000Z</updated>
    
    <content type="html">&lt;p&gt;最近看了一点leveldb源码，了解一下实现机制。&lt;/p&gt;
&lt;p&gt;之前也看过leveldb相关介绍以及别人的分析blog，已经有了一定了解。leveldb如其名，按照层级来组织数据，数据从内存到磁盘一层一层迁移。在内存中是通过skiplist来管理数据，而磁盘上则是一种名为SSTable(Sorted Strings Table)的结构来存储数据的。&lt;/p&gt;
&lt;h5 id=&quot;DB-Get实现&quot;&gt;&lt;a href=&quot;#DB-Get实现&quot; class=&quot;headerlink&quot; title=&quot;DB::Get实现&quot;&gt;&lt;/a&gt;DB::Get实现&lt;/h5&gt;&lt;p&gt;这个头文件include/leveldb/db.h定义了DB抽象类，Get接口也在其中，具体实现在db/db_impl.cc文件中。&lt;br&gt;下面引用的代码因为篇幅会删除一些代码行，完整代码参考源文件。 &lt;/p&gt;
&lt;p&gt;代码：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Status DBImpl::Get(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; ReadOptions&amp;amp; options,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Slice&amp;amp; key,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;* value) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Status s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;MutexLock &lt;span class=&quot;title&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&amp;amp;mutex_)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  SequenceNumber snapshot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Unlock while reading from files and memtables&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mutex_.Unlock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// First look in the memtable, then in the immutable memtable (if any).&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;LookupKey &lt;span class=&quot;title&quot;&gt;lkey&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(key, snapshot)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mem-&amp;gt;Get(lkey, value, &amp;amp;s)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// Done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (imm != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; &amp;amp;&amp;amp; imm-&amp;gt;Get(lkey, value, &amp;amp;s)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// Done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      s = current-&amp;gt;Get(options, lkey, value, &amp;amp;stats);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      have_stat_update = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mutex_.Lock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (have_stat_update &amp;amp;&amp;amp; current-&amp;gt;UpdateStats(stats)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MaybeScheduleCompaction();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面是Get的实现函数，省略了一些代码。Get主要的查询过程在中间if-else语句分支中。在查询之前&lt;code&gt;mutex_.Unlock();&lt;/code&gt;进行了解锁，是因为数据是只追加不删除的，可以同时读写。数据删除会转换成一条标记key-deleted的数据追加到库中。 &lt;/p&gt;
&lt;p&gt;SequenceNumber snapshot为数据序号，每一条数据都有序号，后追加的序号比之前的序号要大，相同key的数据，序号大的要排在前面，参见&lt;code&gt;db/dbformat.cc&lt;/code&gt; &lt;code&gt;InternalKeyComparator::Compare&lt;/code&gt;函数。 &lt;/p&gt;
&lt;p&gt;第一个分支mem指向一个MemTable，MemTable只有Add和Get两个接口来操作数据，底层实现为skiplist，这个mem指向可修改的MemTable。 &lt;/p&gt;
&lt;p&gt;第二个分支imm指向一个不可修改的MemTable，imm是mem达到一定条件后转换来的，具体的逻辑在db/db_impl.cc DBImpl::MakeRoomForWrite函数中。 &lt;/p&gt;
&lt;p&gt;前面2个分支都是在内存中进行查询，没找到就只能到磁盘上查询。最后一个分支current指向当前的Version，Version包含数据文件的元信息。 &lt;/p&gt;
&lt;p&gt;最后根据情况调用MaybeScheduleCompaction函数，在后台对数据进行Compact，将内存的迁到磁盘，对磁盘上的数据进行合并等。&lt;/p&gt;
&lt;p&gt;Version::Get实现。这个函数就是上一节最后一个if分支调用的函数，也是查询磁盘数据的入口。 &lt;/p&gt;
&lt;p&gt;代码:&lt;br&gt;&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Status Version::Get(const ReadOptions&amp;amp; options,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    const LookupKey&amp;amp; k,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    std::string* value,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    GetStats* stats) &amp;#123;      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// We can search level-by-level since entries never hop across&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// levels.  Therefore we are guaranteed that if we find data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// in an smaller level, later levels are irrelevant.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  std::vector&amp;lt;FileMetaData*&amp;gt; tmp&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  FileMetaData* tmp2&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; level = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;; level &amp;lt; config::kNumLevels; level++) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    size_t num_files = files_[level].size()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (num_files == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Get the list of files to search in this level&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    FileMetaData* const* files = &amp;amp;files_[level][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (level == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// Level-0 files may overlap each other.  Find all files that&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// overlap user_key and process them in order from newest to oldest.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      tmp.reserve(num_files)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (uint32_t i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;; i &amp;lt; num_files; i++) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        FileMetaData* f = files[i]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ucmp-&amp;gt;Compare(user_key, f-&amp;gt;smallest.user_key()) &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ucmp-&amp;gt;Compare(user_key, f-&amp;gt;largest.user_key()) &amp;lt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          tmp.push_back(f)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (tmp.empty()) &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      std::sort(tmp.begin(), tmp.&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;(), NewestFirst)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// Binary search to find earliest index whose largest key &amp;gt;= ikey.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      uint32_t index = FindFile(vset_-&amp;gt;icmp_, files_[level], ikey)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (index &amp;gt;= num_files) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        tmp2 = files[index]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ucmp-&amp;gt;Compare(user_key, tmp2-&amp;gt;smallest.user_key()) &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;comment&quot;&gt;// All of &quot;tmp2&quot; is past any data for user_key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          files = &amp;amp;tmp2&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          num_files = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (uint32_t i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;; i &amp;lt; num_files; ++i) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      FileMetaData* f = files[i]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      last_file_read = f&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      last_file_read_level = level&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Saver saver&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      saver.state = kNotFound&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      saver.ucmp = ucmp&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      saver.user_key = user_key&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      saver.value = value&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      s = vset_-&amp;gt;table_cache_-&amp;gt;Get(options, f-&amp;gt;number, f-&amp;gt;file_size,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                   ikey, &amp;amp;saver, SaveValue)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Status::NotFound(Slice())&lt;span class=&quot;comment&quot;&gt;;  // Use an empty error message for speed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面的函数主要是对每个level上的数据从低到高进行查询，比较新的数据放在低的level。 &lt;/p&gt;
&lt;p&gt;主for循环所有level，先根据key查找符合要求的文件，由于Sstable是排序数据，每个文件都有key的范围，所以可以查找包含了查询key的文件即可。level-0和其他的level处理方式不太一样，level-0是直接遍历，而其他level调用FindFile进行查询。 &lt;/p&gt;
&lt;p&gt;找到符合要求的文件之后，进入后一个for循环，通过vset_-&amp;gt;table&lt;em&gt;cache&lt;/em&gt;-&amp;gt;Get查找所有的文件。&lt;/p&gt;
&lt;p&gt;上面提到的FindFile使用internal_key即带序号的查询key在一层的文件中进行二分查找，找到离查询key最近且文件largest-key比查询key大的文件，如果key存在库的这一层中，那应该会落在这个文件。 &lt;/p&gt;
&lt;p&gt;TableCache::Get比较简单，先调用了FindTable找到对应的Table对象，然后调用Table对象的InternalGet函数。下面说FindTable函数和Table::InternalGet函数。&lt;/p&gt;
&lt;p&gt;FindTable函数 &lt;/p&gt;
&lt;p&gt;代码:&lt;br&gt;&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Status TableCache::FindTable(uint64_t file_number, uint64_t file_size,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                             Cache::Handle** handle) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Status s&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  char buf[sizeof(file_number)]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  EncodeFixed64(buf, file_number)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Slice key(buf, sizeof(buf))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  *handle = cache_-&amp;gt;Lookup(key)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (*handle == NULL) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    std::string fname = TableFileName(dbname_, file_number)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RandomAccessFile* file = NULL&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (s.ok()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      s = Table::Open(*options_, file, file_size, &amp;amp;table)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!s.ok()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      TableAndFile* tf = new TableAndFile&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      tf-&amp;gt;file = file&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      tf-&amp;gt;table = table&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      *handle = cache_-&amp;gt;Insert(key, tf, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &amp;amp;DeleteEntry)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;cache&lt;em&gt;-&amp;gt;Lookup(key)先在cache中查找，cache&lt;/em&gt;指向一个LRU的cache，缓存的内容为打开的文件对象和Table对象的指针，最后一个else语句块里cache_-&amp;gt;Insert把要缓存的内容插入了缓存。 &lt;/p&gt;
&lt;p&gt;若缓存中没有要找的Table则调用Table::Open打开文件载入Table对象，然后插入缓存。 &lt;/p&gt;
&lt;p&gt;Table::Open代码:&lt;br&gt;&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Status Table::Open(const &lt;span class=&quot;keyword&quot;&gt;Options&lt;/span&gt;&amp;amp; &lt;span class=&quot;keyword&quot;&gt;options&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               RandomAccessFile* &lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               uint64_t &lt;span class=&quot;keyword&quot;&gt;size&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               Table** table) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; footer_space[Footer::kEncodedLength];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Slice footer_input;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Status s = &lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt;-&amp;gt;&lt;span class=&quot;keyword&quot;&gt;Read&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;size&lt;/span&gt; - Footer::kEncodedLength, Footer::kEncodedLength,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;amp;footer_input, footer_space);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (s.ok()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    s = ReadBlock(&lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt;, opt, footer.index_handle(), &amp;amp;contents);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (s.ok()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      index_block = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Block(contents);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (s.ok()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// We&#39;ve successfully read the footer and the index block: we&#39;re&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ready to serve requests.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Rep* rep = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Table::Rep;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rep-&amp;gt;&lt;span class=&quot;keyword&quot;&gt;options&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;options&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rep-&amp;gt;&lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rep-&amp;gt;metaindex_handle = footer.metaindex_handle();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rep-&amp;gt;index_block = index_block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rep-&amp;gt;cache_id = (&lt;span class=&quot;keyword&quot;&gt;options&lt;/span&gt;.block_cache ? &lt;span class=&quot;keyword&quot;&gt;options&lt;/span&gt;.block_cache-&amp;gt;NewId() : &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *table = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Table(rep);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (*table)-&amp;gt;ReadMeta(footer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Table::Open把index-block的内容读出来缓存起来，如果有meta数据或filter数据，也会读出来并缓存。options.block_cache这个指针如果指向一个cache对象，后面在读入新的block的时候也会把block缓存起来。&lt;/p&gt;
&lt;p&gt;Table::InternalGet &lt;/p&gt;
&lt;p&gt;代码:&lt;br&gt;&lt;figure class=&quot;highlight xl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Status Table::InternalGet(const ReadOptions&amp;amp; options, const Slice&amp;amp; k,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                          void* arg,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                          void (*saver)(void*, const Slice&amp;amp;, const Slice&amp;amp;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Status s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  I&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;terator&lt;/span&gt;* iiter = rep_-&amp;gt;&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;index_block&lt;/span&gt;-&amp;gt;&lt;/span&gt;N&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;ewIterator&lt;/span&gt;(rep_-&amp;gt;&lt;/span&gt;options.comparator);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;iiter&lt;/span&gt;-&amp;gt;&lt;/span&gt;Seek(k);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;if&lt;/span&gt; (iiter-&amp;gt;&lt;/span&gt;Valid()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    S&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;lice&lt;/span&gt; handle_value = iiter-&amp;gt;&lt;/span&gt;value();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    F&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;ilterBlockReader&lt;/span&gt;* filter = rep_-&amp;gt;&lt;/span&gt;filter;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    BlockHandle handle;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (filter != NULL &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        handle.DecodeFrom(&amp;amp;handle_value).ok() &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        !&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;filter&lt;/span&gt;-&amp;gt;&lt;/span&gt;KeyMayMatch(handle.offset(), k)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// Not found&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      I&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;terator&lt;/span&gt;* block_iter = BlockReader(this, options, iiter-&amp;gt;&lt;/span&gt;value());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;block_iter&lt;/span&gt;-&amp;gt;&lt;/span&gt;Seek(k);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;if&lt;/span&gt; (block_iter-&amp;gt;&lt;/span&gt;Valid()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (*&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;saver&lt;/span&gt;)(arg, block_iter-&amp;gt;&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;key&lt;/span&gt;(), block_iter-&amp;gt;&lt;/span&gt;value());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;s&lt;/span&gt; = block_iter-&amp;gt;&lt;/span&gt;status();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      delete block_iter;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Table::InternalGet先在index-block中找到距离key最近的block，block也有key范围，查找过程和查找文件类似也是通过二分查找找到最近的block，但是index-block并不是所有block的索引，所以还需要进一步到block附近进行查找。 &lt;/p&gt;
&lt;p&gt;如果找到key附近的block，就对block进行查找。先结合filter判断key是否不在，如不在直接返回NotFound。然后读index对应的block，进行二次查找。iter-&amp;gt;Seek(k)具体可以参考table/block.cc Block::Iter::Seek函数，函数并没有进行相等比较，只能定位范围。由于iter-&amp;gt;Seek(k)只能定位到key附近，所以需要调用(*saver)(arg, block_iter-&amp;gt;key(), block_iter-&amp;gt;value())，saver对应上文提到的db/version_set.cc SaveValue函数，代码:&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SaveValue&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;* arg, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Slice&amp;amp; ikey, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Slice&amp;amp; v)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Saver* s = &lt;span class=&quot;keyword&quot;&gt;reinterpret_cast&lt;/span&gt;&amp;lt;Saver*&amp;gt;(arg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ParsedInternalKey parsed_key;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!ParseInternalKey(ikey, &amp;amp;parsed_key)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    s-&amp;gt;state = kCorrupt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (s-&amp;gt;ucmp-&amp;gt;Compare(parsed_key.user_key, s-&amp;gt;user_key) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      s-&amp;gt;state = (parsed_key.type == kTypeValue) ? kFound : kDeleted;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (s-&amp;gt;state == kFound) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        s-&amp;gt;value-&amp;gt;assign(v.data(), v.size());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;数据文件的编码格式比较复杂，就不写了，可以参考源文件或网络。 &lt;/p&gt;
&lt;p&gt;以上就是Get的过程，流程还是比较长的。网上的测试结果表明leveldb的写性能高于读，跟它的磁盘查找关系很大，对于需要频繁随机读的应用还是要仔细考虑一下性能问题。打开block-cache可能会提高读性能，相应的就需要消耗内存，把文件放到ssd也是一个优化方案，没有具体实践，不知效果如何。 &lt;/p&gt;
&lt;p&gt;欢迎指出本文的错误，也欢迎分享相关内容！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近看了一点leveldb源码，了解一下实现机制。&lt;/p&gt;
&lt;p&gt;之前也看过leveldb相关介绍以及别人的分析blog，已经有了一定了解。leveldb如其名，按照层级来组织数据，数据从内存到磁盘一层一层迁移。在内存中是通过skiplist来管理数据，而磁盘上则是一种名为
    
    </summary>
    
      <category term="数据库" scheme="http://rivenzoo.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="NoSQL" scheme="http://rivenzoo.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/NoSQL/"/>
    
    
      <category term="C/C++" scheme="http://rivenzoo.github.io/tags/C-C/"/>
    
      <category term="Leveldb" scheme="http://rivenzoo.github.io/tags/Leveldb/"/>
    
  </entry>
  
  <entry>
    <title>Makefile获取依赖的源文件</title>
    <link href="http://rivenzoo.github.io/2015/03/07/makefile-source-dependency/"/>
    <id>http://rivenzoo.github.io/2015/03/07/makefile-source-dependency/</id>
    <published>2015-03-07T15:52:46.000Z</published>
    <updated>2017-03-10T14:25:49.000Z</updated>
    
    <content type="html">&lt;p&gt;代码：&lt;br&gt;&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;exclude=&lt;span class=&quot;string&quot;&gt;&quot;_test&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#exclude=&quot;___&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;src=&lt;span class=&quot;variable&quot;&gt;$(&lt;/span&gt;wildcard *[^&lt;span class=&quot;variable&quot;&gt;$(&lt;/span&gt;exclude)].c ./subs/*.c)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;files=&lt;span class=&quot;variable&quot;&gt;$(&lt;/span&gt;notdir &lt;span class=&quot;variable&quot;&gt;$(&lt;/span&gt;src))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj=&lt;span class=&quot;variable&quot;&gt;$(&lt;/span&gt;patsubst %.c,%.o,&lt;span class=&quot;variable&quot;&gt;$(&lt;/span&gt;files) )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;all:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;variable&quot;&gt;@echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$(&lt;/span&gt;src)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;variable&quot;&gt;@echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$(&lt;/span&gt;files)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;variable&quot;&gt;@echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$(&lt;/span&gt;obj)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;variable&quot;&gt;@echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;end&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;wildcard通过通配符来匹配文件并将结果展开，第一个参数排除了_test.c的文件。&lt;br&gt;notdir去掉src中的目录，只保留文件名&lt;br&gt;patsubst进行替换，把.c换成.o&lt;br&gt;上面代码参考Makefile中的wildcard用法这篇blog，稍微修改了下。&lt;/p&gt;
&lt;h5 id=&quot;UPDATE&quot;&gt;&lt;a href=&quot;#UPDATE&quot; class=&quot;headerlink&quot; title=&quot;UPDATE&quot;&gt;&lt;/a&gt;UPDATE&lt;/h5&gt;&lt;p&gt;上面的代码&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;exclude&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;_test&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;exclude&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;___&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;src=$(wildcard *[^$(&lt;span class=&quot;keyword&quot;&gt;exclude&lt;/span&gt;)].c .&lt;span class=&quot;regexp&quot;&gt;/subs/&lt;/span&gt;*.c)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其实有点问题，*[^$&lt;em&gt;test].c这个正则只能过滤.c之前是’&lt;/em&gt;‘,’t’,’e’,’s’这4个字符的文件名，达不到想要的目的。&lt;br&gt;需要修改一下，对src进行替换&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$(patsubst %_test.c,, $(src))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这样就把文件列表中含_test.c的去掉了。修改后为&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;src &lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;=&lt;span class=&quot;variable&quot;&gt;$(&lt;/span&gt;wildcard *.c ./subs/*.c)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;src &lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;=&lt;span class=&quot;variable&quot;&gt;$(&lt;/span&gt;patsubst %_test.c,,&lt;span class=&quot;variable&quot;&gt;$(&lt;/span&gt;src))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;files &lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;=&lt;span class=&quot;variable&quot;&gt;$(&lt;/span&gt;notdir &lt;span class=&quot;variable&quot;&gt;$(&lt;/span&gt;src))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj &lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;=&lt;span class=&quot;variable&quot;&gt;$(&lt;/span&gt;patsubst %.c,%.o,&lt;span class=&quot;variable&quot;&gt;$(&lt;/span&gt;files) )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;all:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;variable&quot;&gt;@echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$(&lt;/span&gt;src)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;variable&quot;&gt;@echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$(&lt;/span&gt;files)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;variable&quot;&gt;@echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$(&lt;/span&gt;obj)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;variable&quot;&gt;@echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;end&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;代码：&lt;br&gt;&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://rivenzoo.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C/C++" scheme="http://rivenzoo.github.io/tags/C-C/"/>
    
      <category term="Makefile" scheme="http://rivenzoo.github.io/tags/Makefile/"/>
    
  </entry>
  
  <entry>
    <title>C语言INT_MIN定义的问题</title>
    <link href="http://rivenzoo.github.io/2015/01/21/c-minint-define/"/>
    <id>http://rivenzoo.github.io/2015/01/21/c-minint-define/</id>
    <published>2015-01-20T16:33:54.000Z</published>
    <updated>2016-07-18T12:47:53.000Z</updated>
    
    <content type="html">&lt;p&gt;关于c语言INT_MIN定义的问题&lt;/p&gt;
&lt;p&gt;最近看到一段代码&lt;/p&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; INT_MAX 2147483647&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; INT_MIN (-INT_MAX - 1)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;INT_MIN的值应该为 -2147483648，为什么不直接定义呢？原因参考&lt;a href=&quot;http://www.cnblogs.com/Jack47/archive/2013/01/06/TMin32-in-c.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jack47的blog:C语言中TMin的写法&lt;/a&gt;这篇文章。&lt;/p&gt;
&lt;p&gt;个人理解为C语言在处理程序中常量时，符号-和后面的值是分开处理的，先处理字面值，然后将-作为一元运算符。处理字面值的时候会决定这个常量的类型，基本的规则是选能容纳字面值的最小类型。如32位系统，2147483648这个值决定为unsigned int，如果使用&lt;code&gt;#define INT_MIN (-2147483648)&lt;/code&gt;这个定义，INT_MIN类型为unsigned int。&lt;/p&gt;
&lt;p&gt;写了一段代码验证&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; INT_MAX 2147483647&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; INT_MIN (-INT_MAX - 1)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// TMIN is unsigned int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; TMIN (-2147483648)        &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (i &amp;gt; TMIN) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d &amp;gt; tmin\n&quot;&lt;/span&gt;, i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d &amp;lt; tmin\n&quot;&lt;/span&gt;, i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (i &amp;gt; INT_MIN)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d &amp;gt;INT_MIN\n&quot;&lt;/span&gt;, i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d\n&quot;&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(TMIN));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行结果为&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1 &amp;lt; tmin&lt;br&gt;1 &amp;gt;INT_MIN&lt;br&gt;4&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;补充：&lt;/p&gt;
&lt;p&gt;CSAPP的补充材料&lt;a href=&quot;http://csapp.cs.cmu.edu/public/waside/waside-tmin.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;waside-tmin.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上面的例子说明了不同格式字面值在C90和C99下面的类型确定的规则，C90 32位下类型为unsigned，就会产生上面程序的结果。&lt;/p&gt;
&lt;p&gt;对于这种会产生不同行为的代码最好避免.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;关于c语言INT_MIN定义的问题&lt;/p&gt;
&lt;p&gt;最近看到一段代码&lt;/p&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br
    
    </summary>
    
      <category term="编程语言" scheme="http://rivenzoo.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C/C++" scheme="http://rivenzoo.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>Notes About Kafka</title>
    <link href="http://rivenzoo.github.io/2014/09/21/notes-about-kafka/"/>
    <id>http://rivenzoo.github.io/2014/09/21/notes-about-kafka/</id>
    <published>2014-09-20T16:08:00.000Z</published>
    <updated>2016-04-01T12:15:52.000Z</updated>
    
    <content type="html">&lt;h5 id=&quot;consumer-offset-commit&quot;&gt;&lt;a href=&quot;#consumer-offset-commit&quot; class=&quot;headerlink&quot; title=&quot;consumer offset commit&quot;&gt;&lt;/a&gt;consumer offset commit&lt;/h5&gt;&lt;p&gt;使用kafka的python api时遇到了offset回滚的问题，因为最初使用了autocommit参数，发现有时会重复取记录，发现autocommit是批量提交，并且有offset回滚的问题，具体原因未发现，解决方法是手动调用commit函数提交，经过测试手动调用没有出现offset回滚的问题。&lt;/p&gt;
&lt;h5 id=&quot;partition&quot;&gt;&lt;a href=&quot;#partition&quot; class=&quot;headerlink&quot; title=&quot;partition&quot;&gt;&lt;/a&gt;partition&lt;/h5&gt;&lt;p&gt;一开始为了简单只使用了一个分区，consumer都从一个leader取数据，请求压力都在一台机器。使用不同分区策略可以分散topic的leader，还可以灵活处理不同数据。&lt;/p&gt;
&lt;h5 id=&quot;fetch-msg&quot;&gt;&lt;a href=&quot;#fetch-msg&quot; class=&quot;headerlink&quot; title=&quot;fetch msg&quot;&gt;&lt;/a&gt;fetch msg&lt;/h5&gt;&lt;p&gt;MaxWaitTime 请求最大等待时间，MinBytes 请求消息的最小字节数，通过这2个参数可以调整你获取数据时的等待策略，最简单的做法就是不等待，没数据直接返回。&lt;/p&gt;
&lt;h5 id=&quot;zookeeper&quot;&gt;&lt;a href=&quot;#zookeeper&quot; class=&quot;headerlink&quot; title=&quot;zookeeper&quot;&gt;&lt;/a&gt;zookeeper&lt;/h5&gt;&lt;p&gt;由于硬盘限制，把kafka和zookeeper的日志目录放在了同一个磁盘，而且磁盘的性能不是很好，造成了kafka写数据效率低下，每次写数据只有几百k。zookeeper网站上对这2个配置有Notes说不要把他们放在繁忙的磁盘设备上，会影响其他程序写磁盘的性能，最好这2个目录都分开存放不同设备。简单看了一下，dataDir下存的是snapshot文件，dataLogDir存的是log文件，应该是zookeeper把内存数据持久化到这2种文件中了，而且持久化操作很频繁且写的数据很少，会影响kafka写日志。&lt;/p&gt;
&lt;h5 id=&quot;磁盘参数&quot;&gt;&lt;a href=&quot;#磁盘参数&quot; class=&quot;headerlink&quot; title=&quot;磁盘参数&quot;&gt;&lt;/a&gt;磁盘参数&lt;/h5&gt;&lt;p&gt;在排查磁盘io高的问题时用到了&lt;code&gt;iostat -d -x&lt;/code&gt;命令，在排查时主要关注w/s、wkB/s、rkB/s，对于扇区没怎么关注，rsec/s wsec/s avgrq-sz这几个参数反应磁盘操作扇区的情况，当磁盘利用率高且iowait高，而平均扇区低也就意味着磁盘把大量时间用于磁盘寻道，你可能需要考虑是不是有大量随机写磁盘的操作。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;consumer-offset-commit&quot;&gt;&lt;a href=&quot;#consumer-offset-commit&quot; class=&quot;headerlink&quot; title=&quot;consumer offset commit&quot;&gt;&lt;/a&gt;consumer offset comm
    
    </summary>
    
      <category term="Linux" scheme="http://rivenzoo.github.io/categories/Linux/"/>
    
      <category term="消息中间件" scheme="http://rivenzoo.github.io/categories/Linux/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="Kafka" scheme="http://rivenzoo.github.io/tags/Kafka/"/>
    
      <category term="Zookeeper" scheme="http://rivenzoo.github.io/tags/Zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>重入与线程安全</title>
    <link href="http://rivenzoo.github.io/2013/11/22/about-thread-safe/"/>
    <id>http://rivenzoo.github.io/2013/11/22/about-thread-safe/</id>
    <published>2013-11-21T16:13:44.000Z</published>
    <updated>2016-09-24T07:19:30.000Z</updated>
    
    <content type="html">&lt;p&gt;在stackoverflow上看的的关于可重入与线程安全的区别：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;These functions are not reentrant. They are thread-safe. There’s a big difference. Functions that are reentrant are automatically thread-safe, but thread-safe functions can still deadlock (or worse) if called again from the same thread they’re already running in (for example from a signal handler).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;函数可重入很自然会觉得该函数是线程安全的，既然能被其他流程中断并可调用自身也就可以被多个线程同时调用。但是线程安全是不是可重入有点模糊，上面说了一种情况，当重复调用一个线程安全的函数，并且函数中有锁就有可能发生死锁，表明线程安全不一定可重入。看来重入的要求比线程安全要更严格一点。&lt;/p&gt;
&lt;p&gt;附带查了查关于Posix的标准io操作，Posix标准要求操作字符流的函数实现为可重入，但是各个实现为了性能方面的考虑都没有实现为可重入的，这些函数有潜在不安全。但是又说明：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;all standard I/O functions that reference character streams shall behave as if they use flockfile() and funlockfile() internally to obtain ownership of the character streams&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;表明它们应该是线程安全的。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在stackoverflow上看的的关于可重入与线程安全的区别：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;These functions are not reentrant. They are thread-safe. There’s a big difference. F
    
    </summary>
    
      <category term="编程语言" scheme="http://rivenzoo.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C/C++" scheme="http://rivenzoo.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>自定义linux信号</title>
    <link href="http://rivenzoo.github.io/2013/11/05/define-linux-signal/"/>
    <id>http://rivenzoo.github.io/2013/11/05/define-linux-signal/</id>
    <published>2013-11-05T11:55:55.000Z</published>
    <updated>2016-07-18T12:48:10.000Z</updated>
    
    <content type="html">&lt;p&gt;有时候我们需要在程序中利用信号来控制程序行为，linux为我们提供了2个已经定义的信号SIGUSR1和SIGUSR2，一般的程序利用这2个信号已经能满足需要，不过我最近需要一些其他信号来避免覆盖原来的信号处理函数。 &lt;/p&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; MYSIG_MSG        (SIGUSR2 + 1)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 定义信号然后注册处理函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后到系统里查了一下，MYSIG_MSG其实将其他的信号给覆盖了&lt;br&gt;&lt;code&gt;$kill -l&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;10) SIGUSR1    11) SIGSEGV    12) SIGUSR2 13) SIGPIPE    14) SIGALRM &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;虽然SIGPIPE和SIGALRM在这个程序中没有用到，但是这并不是我想要的效果。&lt;br&gt;我发现在后面有 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;34) SIGRTMIN 35) SIGRTMIN+1    36) SIGRTMIN+2 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;man 7 signal&lt;/code&gt;页面同样也说明可以用 SIGRTMIN作为自定义信号。然后程序里就多了下面的代码： &lt;/p&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; MYSIG_MSG        (SIGRTMIN+ 1)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;结果出错了，但是并不是这个定义方式的问题。在我程序中有下面的代码： &lt;/p&gt;
&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt;(signo)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;MYSIG_MSG&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;``&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;`  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;编译时才发现原来SIGRTMIN并不是一个常量，看了头文件里才知道：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;// centos5.9 /usr/include/bits/signum.h&lt;/p&gt;
&lt;p&gt;#define SIGRTMIN        (__libc_current_sigrtmin ())&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;原来是函数调用，运行时确定的。 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;要用这个SIGRTMIN宏是不行，只能自己定义了：&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;#define MYSIGRTMIN    34&lt;/p&gt;
&lt;p&gt;#define MYSIG_MSG     (MYSIGRTMIN + 1)&lt;br&gt;&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;在找到系统定义的SIGRTMIN值之前，根据man &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;里面的说明：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; Linux supports &lt;span class=&quot;number&quot;&gt;32&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;real&lt;/span&gt;-time signals, numbered from &lt;span class=&quot;number&quot;&gt;32&lt;/span&gt; (SIGRTMIN) to &lt;span class=&quot;number&quot;&gt;63&lt;/span&gt; (SIGRTMAX). &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;我把自定义的信号值定义成了&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;，但是一直注册不了这个信号，后来赫然发现在 &lt;span class=&quot;string&quot;&gt;`man 7 signal`&lt;/span&gt;下面有一行说明， &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; However, the glibc POSIX threads implementation internally uses two (&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; NPTL) or three  (&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;  LinuxThreads)  &lt;span class=&quot;built_in&quot;&gt;real&lt;/span&gt;-time signals  (see  pthreads(&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;)), and adjusts the value &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; SIGRTMIN suitably (to &lt;span class=&quot;number&quot;&gt;34&lt;/span&gt; or &lt;span class=&quot;number&quot;&gt;35&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这个说明在ubuntu12&lt;span class=&quot;number&quot;&gt;.04&lt;/span&gt;里面看见的，估计centos也有类似的情况。同时头文件下面也有：&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;/&lt;em&gt; These are the hard limits of the kernel.  These values should not be&lt;br&gt;used directly at user level.  &lt;/em&gt;/&lt;/p&gt;
&lt;p&gt;#define __SIGRTMIN  32&lt;/p&gt;
&lt;p&gt;#define __SIGRTMAX  (_NSIG - 1)&lt;br&gt;```&lt;br&gt;改成34之后就没有问题了。不过这个方法不太可靠，程序不应该直接用常量标识信号. &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;有时候我们需要在程序中利用信号来控制程序行为，linux为我们提供了2个已经定义的信号SIGUSR1和SIGUSR2，一般的程序利用这2个信号已经能满足需要，不过我最近需要一些其他信号来避免覆盖原来的信号处理函数。 &lt;/p&gt;
&lt;figure class=&quot;highlight
    
    </summary>
    
      <category term="编程语言" scheme="http://rivenzoo.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C/C++" scheme="http://rivenzoo.github.io/tags/C-C/"/>
    
      <category term="Linux" scheme="http://rivenzoo.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://rivenzoo.github.io/2013/09/01/hello-world/"/>
    <id>http://rivenzoo.github.io/2013/09/01/hello-world/</id>
    <published>2013-09-01T11:55:55.000Z</published>
    <updated>2016-04-01T12:36:03.000Z</updated>
    
    <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
